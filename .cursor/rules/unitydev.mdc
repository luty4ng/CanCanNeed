---
description: 
globs: *.cs
alwaysApply: false
---
# Unity 2022.3.16.f1 URP 开发规则

## 项目概述
本项目使用Unity 2022.3.16.f1引擎和Universal Render Pipeline (URP)。项目结构遵循Unity标准约定。

## C# 脚本开发规范

### 命名约定
- **类名**: 使用PascalCase，例如 `PlayerController`, `GameManager`
- **方法名**: 使用PascalCase，例如 `StartGame()`, `UpdatePlayerPosition()`
- **变量名**: 使用camelCase，例如 `playerHealth`, `currentScore`
- **常量**: 使用UPPER_SNAKE_CASE，例如 `MAX_HEALTH`, `DEFAULT_SPEED`
- **私有字段**: 使用m_前缀，例如 `m_playerTransform`, `m_isGameActive`

### 注意事项
- 组件引用应在Awake()或Start()中获取并缓存
- 避免在Update()中进行耗时操作或分配内存
- 使用C# 8.0+的新特性，如nullable引用类型
- 创建的所有脚本和资产都放置在 `Assets/_Prototypes/` 目录下
- 使用Debug.Log系列方法记录不同级别的日志
- 使用try-catch处理可预见的异常
- 创建README.md文档说明系统架构和使用方法
- 使用DrawGizmos辅助可视化调试
- 自定义编辑器工具需添加使用说明
- 使用Conditional特性区分调试和发布功能

### URP 特定规范

#### Shader和材质
- 使用URP内置着色器或URP兼容的自定义着色器
- URP设置文件位于 @Assets/Settings/

#### 渲染特性
- 优先使用URP的Forward Rendering Path
- 合理使用Renderer Features和Render Objects
- 注意URP的性能限制，避免过多的实时光源

#### 后处理
- 使用URP Volume系统进行后处理
- 全局Volume设置应保存在Settings目录

## 性能优化指南

### 脚本优化
- 缓存频繁访问的Transform和Component引用
- 避免在Update中进行频繁的GetComponent调用
- 使用对象池管理频繁创建/销毁的对象
- 合理使用协程代替Update中的计时器

### 内存管理
- 及时取消订阅事件避免内存泄漏
- 在OnDestroy中清理资源
- 避免在热路径中产生GC垃圾

## 调试和测试

### 调试最佳实践
- 使用Unity的Debug.Log进行日志记录
- 利用Gizmos进行可视化调试
- 使用Unity Profiler监控性能
- 在Inspector中暴露调试信息

### 单元测试
- 测试脚本应放置在 `Assets/Tests/` 目录
- 使用Unity Test Framework进行单元测试
- 为核心游戏逻辑编写测试用例

## 特殊注意事项

### URP 限制和优化
- 注意URP的光源数量限制
- 合理使用LOD系统
- 使用URP的Batching优化渲染性能

此规则文件将帮助确保代码质量、性能和可维护性。在开发过程中，请始终参考这些规范。


